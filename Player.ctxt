#BlueJ class context
comment0.target=Player
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Player\ here.\r\n\r\n\ @author\ E\ Leblanc\r\n\ @version\ 08/04/2025\r\n
comment1.params=pName\ pGui
comment1.target=Player(java.lang.String,\ UserInterface)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Player\r\n
comment10.params=
comment10.target=void\ back()
comment10.text=\r\n\ Moves\ the\ player\ back\ to\ the\ most\ recently\ visited\ room,\ if\ any.\r\n\ Prints\ a\ message\ if\ there\ is\ no\ previous\ room.\r\n
comment11.params=
comment11.target=Room\ getPreviousRoom()
comment11.text=\r\n\ Returns\ the\ most\ recently\ visited\ room\ without\ removing\ it\ from\ the\ stack.\r\n\r\n\ @return\ The\ previous\ room.\r\n
comment12.params=pCommand
comment12.target=void\ take(Command)
comment12.text=\r\n\ Attempts\ to\ take\ an\ item\ from\ the\ current\ room\ and\ add\ it\ to\ the\ player's\ inventory.\r\n\ Performs\ checks\ such\ as\:\r\n\ -\ If\ the\ item\ exists\ in\ the\ room.\r\n\ -\ If\ the\ player\ has\ the\ shovel\ before\ taking\ the\ key.\r\n\ -\ Weight\ limits\ based\ on\ the\ maximum\ carrying\ capacity.\r\n\r\n\ @param\ pCommand\ The\ name\ of\ the\ item\ to\ take.\r\n
comment13.params=pCommand
comment13.target=void\ drop(Command)
comment13.text=\r\n\ Drops\ an\ item\ from\ the\ player's\ inventory\ into\ the\ current\ room.\r\n\ Adjusts\ the\ total\ carried\ weight\ accordingly.\r\n\r\n\ @param\ pCommand\ The\ command\ "drop\ item"\ with\ the\ second\ word\ being\ the\ item\ to\ drop.\r\n
comment14.params=
comment14.target=void\ backpack()
comment14.text=\r\n\ Displays\ the\ contents\ of\ the\ player's\ backpack\ including\ the\ items,\r\n\ current\ total\ weight\ carried,\ and\ maximum\ carrying\ capacity.\r\n\ If\ the\ backpack\ is\ empty,\ notifies\ the\ player.\r\n
comment15.params=pItemName
comment15.target=boolean\ hasItem(java.lang.String)
comment15.text=\r\n\ Checks\ whether\ the\ player\ currently\ has\ an\ item\ with\ the\ given\ name\ in\ their\ inventory.\r\n\r\n\ @param\ pItemName\ The\ name\ of\ the\ item\ to\ check.\r\n\ @return\ true\ if\ the\ item\ is\ in\ the\ player's\ inventory,\ false\ otherwise.\r\n
comment16.params=
comment16.target=void\ charge()
comment16.text=\r\n\ Charges\ the\ beamer\ device\ with\ the\ player's\ current\ room,\ enabling\ teleportation\ later.\r\n\ Decreases\ the\ available\ charge\ count.\r\n\ If\ no\ charges\ are\ left,\ informs\ the\ player.\r\n
comment17.params=
comment17.target=void\ teleport()
comment17.text=\r\n\ Teleports\ the\ player\ to\ the\ room\ stored\ in\ the\ beamer.\r\n\ If\ the\ beamer\ is\ not\ charged,\ instructs\ the\ player\ to\ charge\ it\ first.\r\n\ After\ teleporting,\ clears\ the\ beamer\ charge\ and\ updates\ the\ UI.\r\n
comment18.params=
comment18.target=Room\ getBeamer()
comment18.text=\r\n\ Returns\ the\ Room\ currently\ stored\ in\ the\ beamer\ (teleport\ target).\r\n\r\n\ @return\ The\ room\ stored\ in\ the\ beamer,\ or\ null\ if\ none.\r\n
comment19.params=
comment19.target=void\ look()
comment19.text=\r\n\ Prints\ the\ detailed\ description\ of\ the\ player's\ current\ room.\r\n
comment2.params=pGui
comment2.target=void\ setGUI(UserInterface)
comment2.text=\r\n\ Sets\ the\ user\ interface\ for\ this\ player.\r\n\r\n\ @param\ pGui\ The\ user\ interface\ to\ set.\r\n
comment20.params=pCommand
comment20.target=void\ eat(Command)
comment20.text=\r\n\ Handles\ the\ player\ eating\ an\ item\ specified\ by\ the\ command.\r\n\ If\ the\ item\ is\ "cake",\ special\ effects\ happen\ including\ infection\ and\ trapping.\r\n\ Otherwise,\ informs\ the\ player\ they\ are\ no\ longer\ hungry.\r\n\r\n\ @param\ pCommand\ The\ command\ containing\ the\ item\ to\ eat.\r\n
comment21.params=
comment21.target=Room\ getFreeRoom()
comment21.text=\r\n\ Returns\ the\ room\ where\ the\ player\ was\ set\ free\ from\ an\ effect\ or\ trap.\r\n\r\n\ @return\ The\ free\ room\ reference.\r\n
comment3.params=
comment3.target=java.lang.String\ getName()
comment3.text=\r\n\ Returns\ the\ player's\ name.\r\n\r\n\ @return\ The\ player's\ name.\r\n
comment4.params=
comment4.target=Room\ getCurrentRoom()
comment4.text=\r\n\ Returns\ the\ current\ room\ where\ the\ player\ is.\r\n\r\n\ @return\ The\ current\ Room.\r\n
comment5.params=pRoom
comment5.target=void\ setCurrentRoom(Room)
comment5.text=\r\n\ Sets\ the\ player's\ current\ room.\r\n\r\n\ @param\ pRoom\ The\ room\ to\ set\ as\ current.\r\n
comment6.params=
comment6.target=java.util.Stack\ getPreviousRooms()
comment6.text=\r\n\ Returns\ the\ stack\ of\ previously\ visited\ rooms.\r\n\r\n\ @return\ Stack\ of\ Rooms\ visited\ previously.\r\n
comment7.params=pRoom
comment7.target=void\ setPreviousRoom(Room)
comment7.text=\r\n\ Pushes\ a\ room\ onto\ the\ previous\ rooms\ stack.\r\n\r\n\ @param\ pRoom\ The\ room\ to\ push\ onto\ the\ stack.\r\n
comment8.params=
comment8.target=void\ removePreviousRoom()
comment8.text=\r\n\ Removes\ the\ most\ recent\ room\ from\ the\ previous\ rooms\ stack.\r\n
comment9.params=pStringRoom
comment9.target=void\ goRoom(java.lang.String)
comment9.text=\r\n\ Moves\ the\ player\ to\ a\ connected\ room\ in\ the\ specified\ direction.\r\n\ The\ current\ room\ is\ pushed\ onto\ the\ previous\ rooms\ stack.\r\n\r\n\ @param\ pStringRoom\ The\ name/direction\ of\ the\ next\ room\ to\ move\ to.\r\n
numComments=22
